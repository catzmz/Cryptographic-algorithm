

#include <iostream>
#include <NTL/ZZ.h>
#include <immintrin.h> 
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
using namespace std;
using namespace NTL;

void resolve_ed(ZZ& index, ZZ& odd, ZZ d, ZZ e) {
	ZZ tem = e * d - 1;
	odd = tem;
	index = 0;
	while (tem % 2 == 0) {
		(index)++;
		tem = tem / 2;
		odd = tem;

	}
}

void findpq(ZZ p,ZZ q,ZZ w,ZZ n,ZZ odd,ZZ v0) {
	int find = 0;//用于标志寻找是否成功
	while (1) {
		//随机生成w，由于数据较大，因此先在1-n/8范围内尝试寻找
		srand(time(0));
		w = to_ZZ(rand()) % (n / 8);
		//v=pow(w,r)modn
		ZZ v = PowerMod(w, odd, n);
		if (GCD(w, n) > 1 && GCD(w, n) < n) {
			cout << "p : " << GCD(w, n) << endl;//寻找成功
			break;
		}
		while ((v % n) != 1) {//若是非平凡解，进入循环
			v0 = v;
			v = (v * v) % n;
			if (v == 1) {//找到解
				//找到的是平凡解-1，寻找失败，跳出循环重新选择w
				if ((v0 % n) == (n - 1)) {
					break;
				}
				else {
					//找到非平凡解，寻找成功
					cout << "p " << GCD(v0 + 1, n) << endl;
					find = 1;//标志寻找成功
					break;
				}
			}
		}
		if (find == 1) {//寻找成功，不再循环
			break;
		}

	}

}
ZZ myCRT(ZZ a,ZZ b,ZZ p,ZZ q) {//CRT获取m
	ZZ n = p * q;
	ZZ _M1 = InvMod(q, p);
	ZZ _M2 = InvMod(ZZ(2003-1511), ZZ(1511));
		return ((q * a * _M1) + (p * b * _M2)) % (n);
}
int main( )
{
	//初始化
	ZZ index;
	ZZ odd;
	ZZ d = to_ZZ(2015347);
	ZZ e = to_ZZ(3);
	ZZ c = to_ZZ(152702);
	ZZ n = to_ZZ(3026533);
	//计算s,r
	resolve_ed(index, odd, d, e);
	ZZ w;
	ZZ v0;
	ZZ p=to_ZZ(2003);
	ZZ q=to_ZZ(1511);
	ZZ c1, c2;
	ZZ d1, d2;
	c1 = c % p;
	//cout << "c1:" << c1 << endl;
	c2 = c % q;
	//cout << "c2:" << c2<< endl;
	d1 = d%( p - 1);
	d2 = d % (q - 1);
	ZZ a= PowerMod(c1, d1, p);
	ZZ b= PowerMod(c2, d2, q);
	//auto start = std::chrono::high_resolution_clock::now();
	//cout << "m:" << PowerMod(c, d, n) << endl;
	//auto end = std::chrono::high_resolution_clock::now();
	//std::chrono::duration<double> elapsed = end - start;
	//cout << "Elapsed time: " << elapsed.count() << " seconds\n";
	auto start = std::chrono::high_resolution_clock::now();
	cout << myCRT(a, b, p, q) << endl;
	auto end = std::chrono::high_resolution_clock::now();
	std::chrono::duration<double> elapsed = end - start;
	cout << "Elapsed time: " << elapsed.count() << " seconds\n";
	
	return 0;
}
